// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(membresiaContext))]
    partial class membresiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("webapi.Models.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("accion");

                    b.Property<string>("Controlador")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("controlador");

                    b.Property<string>("Tipo")
                        .HasColumnType("character varying")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("pk_permiso");

                    b.ToTable("permiso", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_rol");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("webapi.Models.RolPermiso", b =>
                {
                    b.Property<int>("IdRol")
                        .HasColumnType("integer")
                        .HasColumnName("id_rol");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("integer")
                        .HasColumnName("id_permiso");

                    b.HasKey("IdRol", "IdPermiso");

                    b.HasIndex("IdPermiso");

                    b.ToTable("rol_permiso", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiracion")
                        .HasColumnType("timestamp")
                        .HasColumnName("refresh_token_expiracion");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("webapi.Models.UsuarioRol", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.Property<int>("IdRol")
                        .HasColumnType("integer")
                        .HasColumnName("id_rol");

                    b.HasKey("IdUsuario", "IdRol")
                        .HasName("pk_usuario_rol");

                    b.HasIndex("IdRol");

                    b.ToTable("usuario_rol", (string)null);
                });

            modelBuilder.Entity("webapi.Models.RolPermiso", b =>
                {
                    b.HasOne("webapi.Models.Permiso", "PermisoAsociado")
                        .WithMany("PermisoRoles")
                        .HasForeignKey("IdPermiso")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("webapi.Models.Rol", "RolAsociado")
                        .WithMany("RolPermisos")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("PermisoAsociado");

                    b.Navigation("RolAsociado");
                });

            modelBuilder.Entity("webapi.Models.UsuarioRol", b =>
                {
                    b.HasOne("webapi.Models.Rol", "RolAsociado")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Usuario", "UsuarioAsociado")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolAsociado");

                    b.Navigation("UsuarioAsociado");
                });

            modelBuilder.Entity("webapi.Models.Permiso", b =>
                {
                    b.Navigation("PermisoRoles");
                });

            modelBuilder.Entity("webapi.Models.Rol", b =>
                {
                    b.Navigation("RolPermisos");

                    b.Navigation("RolUsuarios");
                });

            modelBuilder.Entity("webapi.Models.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
